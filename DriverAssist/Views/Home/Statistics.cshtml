@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Statistics";
}

@model AuthWebApi.Models.PassageData
<script src="https://code.jquery.com/jquery-3.1.0.min.js"> </script>

<div id="map" style="height: 300px; height:50%; text-align: center; width: 100%;"></div>


<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>
            <div class="collapse navbar-collapse" id="myNavbar">
                <ul class="nav navbar-nav">
                    @*<li><a href="#section1">Accelerometer</a></li>
                        <li><a href="#section2">GPS</a></li>
                        <li><a href="#section3">Magnetometer</a></li>
                        <li><a href="#section4">Gyroscope</a></li>
                        <li><a href="#section5">Whatever</a></li>*@

                    <li> <button type="submit" class="btn btn-info pull-left" onclick="GPSLat()">GPS: Lat</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="GPSLng()">GPS: Lng</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="Accelerometer('X')">Accelerometer: X Axis</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="Accelerometer('Y')">Accelerometer: Y Axis</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="Accelerometer('Z')">Accelerometer: Z Axis</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="Gyroscope('X')">Gyroscope: X Axis</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="Gyroscope('Y')">Gyroscope: Y Axis</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="Gyroscope('Z')">Gyroscope: Z Axis</button></li>
                    <li> <button type="submit" class="btn btn-info pull-left" onclick="LightSensor()">Light Intensity</button></li>
                </ul>
            </div>
        </div>
        <div>
            <button type="submit" class="btn btn-info btn-fill pull-left" onclick="Split()">Split</button>
            <button type="submit" class="btn btn-info btn-fill pull-left" onclick="Delete()">Delete</button>
        </div>
        @*<div id="section1" class="container-fluid">
                <h1>Chart</h1>
                <div id="chart_div"></div>
            </div>*@
        <div id="section2" class="container-fluid">
            <h1>Sensor Data</h1>
            <div id="dashboard">
                <div id="chart_div2"></div>
                <div id="range_filter_div"></div>
            </div>
        </div>
        @*<div id="section3" class="container-fluid">
                <h1>Section 3</h1>
                <p>One more chart</p>
            </div>
            <div id="section4" class="container-fluid">
                <h1>Section 4</h1>
                <p>One more chart</p>

            </div>
            <div id="section5" class="container-fluid">
                <h1>Section 5</h1>
                <p>One more chart</p>
            </div>*@
    </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    var poly;
    var selectionPoly;
    var map;
    var markers = [];
    var chart;
    var startRange;
    var endRange;
    var secondClick = false;
    var coordinates;
    var sensorData;
    var rangeFilter;
    var dash;
    var view;

    google.charts.load('current', { packages: ['corechart', 'line', 'controls'] });

    google.charts.setOnLoadCallback(drawBackgroundColor);

    @{
        var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
        serializer.MaxJsonLength = Int32.MaxValue;
        var jsonModel = serializer.Serialize(Model);
    }

    @*var model = @Html.Raw(Json.Encode(Model));*@
    var model = @Html.Raw(jsonModel);

    function drawBackgroundColor() {

        sensorData = new google.visualization.DataTable();
        sensorData.addColumn('date', 'Date');
        sensorData.addColumn('number', 'Lng');
        sensorData.addColumn({ type: 'boolean', role: 'emphasis' });

        for (i = 0; i < model.LocationLng.length; i++) {
            sensorData.addRow([new Date(model.LocationTimestamp[i]), model.LocationLng[i], false]);
        }
        //alert(sensorData.getNumberOfRows());
        var rangeStart = sensorData.getValue(0, 0);
        var rangeEnd = sensorData.getValue(sensorData.getNumberOfRows()-1, 0);
        rangeFilter = new google.visualization.ControlWrapper({
            controlType: 'ChartRangeFilter',
            containerId: 'range_filter_div',
            options: {
                format: 'h:mm a',
                filterColumnIndex: 0,
                ui: {
                    chartOptions: {
                        height: 50,
                        chartArea: {
                            width: '75%'
                        }
                    },
                    minRangeSize: 10000, // milliseconds = 10 sec
                    snapToData: true
                }
            },
            view: {
                columns: [0, 1, 2]
            },
            state: {
                range: {
                    start: rangeStart,
                    end: rangeEnd
                }
            }
        });

        chart = new google.visualization.ChartWrapper({
            chartType: 'LineChart',
            containerId: 'chart_div2',
            options: {
                // width and chartArea.width should be the same for the filter and chart
                height: 400,
                chartArea: {
                    width: '75%'
                },
                view: {
                    columns: [0, 1]
                },
                hAxis: {
                    gridlines: {
                        count: -1,
                        units: {
                            days: { format: ['MMM dd'] },
                            hours: { format: ['HH:mm', 'ha'] },
                        }
                    },
                    minorGridlines: {
                        units: {
                            hours: { format: ['hh:mm:ss a', 'ha'] },
                            minutes: { format: ['HH:mm a Z', ':mm'] }
                        }
                    }
                }
            }
        });

        dash = new google.visualization.Dashboard(document.getElementById('dashboard'));
        // bind the chart to the filter
        dash.bind([rangeFilter], [chart]);

        document.getElementById('range_filter_div').addEventListener("mouseup", updateChart);

        google.visualization.events.addListener(chart, 'select', chartSelectionEvent);

        view = new google.visualization.DataView(sensorData);
        dash.draw(view);
        updateChart();
    }

    function chartSelectionEvent() {
        var selection = chart.getChart().getSelection();
        var selectedtime = chart.getDataTable().getValue(selection[0].row, 0);

        if (secondClick == false) {
            startRange = selectedtime;
            secondClick = true;
            DeleteMarkers(markers);
            markers = [];

            selectionPoly.setMap(null);
            selectionPoly = new google.maps.Polyline({
                strokeColor: '#00ff00',
                strokeOpacity: 1.0,
                strokeWeight: 5,
                map: map,
                path: []
            });

        } else {
            endRange = selectedtime;
            secondClick = false;
            DrawSelectionPoly();
            SelectOnChart();
        }
    };

    function updateChart() {
        var startpos =0;
        var endpos;
        var rangeLength = 0;
        for (var i = 0; i < sensorData.getNumberOfRows(); i++) {
            if ((sensorData.getValue(i, 0) >= rangeFilter.getState().range.start) && (sensorData.getValue(i, 0) <= rangeFilter.getState().range.end)) {
                if (rangeLength == 0) {
                    startpos = i;
                }
                rangeLength++;
            }
        }
        //alert("zanzaczony obszar:" + rangeLength);
        var modulo = Math.ceil(rangeLength / 500);
        var moduloOut = Math.ceil(sensorData.getNumberOfRows() /1000);
        endpos = startpos + rangeLength;
        var visibleRows = [];

        for (var i = 0; i < startpos; i++) {
            if (i % moduloOut == 0)
                visibleRows.push(i);
        }
        for (var i = startpos; i < endpos; i++) {
            if (i % modulo == 0)
                visibleRows.push(i);
        }
        for (var i = endpos; i < sensorData.getNumberOfRows(); i++) {
            if (i % moduloOut == 0)
                visibleRows.push(i);
        }
        view.setRows(visibleRows);
        dash.draw(view);
    };

    function changeRange() {
        rangeFilter.setState({
            range: {
                start: startRange,
                end: endRange
            }
        });
        rangeFilter.draw();
        updateChart();
    }

    function initMap() {

        @*var model = @Html.Raw(Json.Encode(Model));*@
        var model = @Html.Raw(jsonModel);
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            center: new google.maps.LatLng(model.LocationLat[1], model.LocationLng[1])
        });

        poly = new google.maps.Polyline({
            strokeColor: '#ff0000',
            strokeOpacity: 1.0,
            strokeWeight: 3
        });
        poly.setMap(map);

        selectionPoly = new google.maps.Polyline({
            strokeColor: '#00ff00',
            strokeOpacity: 1.0,
            strokeWeight: 5,
            map: map,
            path: []
        });

        for (i = 0; i < model.LocationLat.length; i++)
        {
            latLng = new google.maps.LatLng(model.LocationLat[i], model.LocationLng[i]);
            poly.getPath().push(latLng);
        }


        google.maps.event.addListener(poly, 'click', function (h) {
            var latlng = h.latLng;
            var needle = {
                minDistance: 9999999999, //silly high
                index: -1,
                latlng: null
            };
            poly.getPath().forEach(function (routePoint, index) {
                var dist = google.maps.geometry.spherical.computeDistanceBetween(latlng, routePoint);
                if (dist < needle.minDistance) {
                    needle.minDistance = dist;
                    needle.index = index;
                    needle.latlng = routePoint;
                }
            });
            // The closest point in the polyline
            // alert("Closest index: " + needle.index);
            var marker = new google.maps.Marker({
                position: needle.latlng,
                title: needle.index.toString(), // title is id
                map: null
            });
            marker.setIcon(
                'https://lh3.ggpht.com/hx6IeSRualApBd7KZB9s2N7bcHZIjtgr9VEuOxHzpd05_CZ6RxZwehpXCRN-1ps3HuL0g8Wi=w9-h9');


            if (secondClick == false) {
                startRange = new Date(model.LocationTimestamp[needle.index]);
                secondClick = true;
                DeleteMarkers(markers);
                markers = [];

                selectionPoly.setMap(null);
                selectionPoly = new google.maps.Polyline({
                    strokeColor: '#00ff00',
                    strokeOpacity: 1.0,
                    strokeWeight: 5,
                    map: map,
                    path: []
                });

            } else {
                endRange = new Date(model.LocationTimestamp[needle.index]);
                secondClick = false;
                DrawSelectionPoly();
                SelectOnChart();
            }
            markers.push(marker);
            SetMapOnAll(map, markers);
        });
    }

    function DeleteMarkers(markers) {
        SetMapOnAll(null, markers);
    }

    function SetMapOnAll(map, markers) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }


    function SelectOnChart() {
        if (startRange > endRange ) {
            var temp = startRange;
            startRange = endRange;
            endRange = temp;
        }
        for (var i = 0; i < sensorData.getNumberOfRows(); i++) {
            if ((sensorData.getValue(i, 0) >= startRange) && (sensorData.getValue(i, 0) <= endRange)) {
                sensorData.setValue(i, 2, true);  // ustawimay pogróbienie zanzaczonego obszaru na wykresie
            } else {
                sensorData.setValue(i, 2, false); // bez pogróbienia
            }
        }
        changeRange();
    }

    function DrawSelectionPoly() {

        if (startRange > endRange) {
            var temp = startRange;
            startRange = endRange;
            endRange = temp;
        }
        for (var i = 0; i < model.LocationTimestamp.length; i++) {
            if ((model.LocationTimestamp[i] >= startRange) && (model.LocationTimestamp[i] <= endRange)) {
                var latLng = new google.maps.LatLng(model.LocationLat[i], model.LocationLng[i]);
                selectionPoly.getPath().push(latLng);
            }
        }
        selectionPoly.setMap(map);
    }

    function Split() {
        alert("TODO: podpiac do bazy");
    }

    google.maps.event.addDomListener(window, 'load', initMap);
</script>

<script>
    function GPSLng() {
        // Przykład:
        sensorData = new google.visualization.DataTable();
        sensorData.addColumn('date', 'Date'); // To jest nasza data (id)
        sensorData.addColumn('number', 'Lng'); // To co pokazujemy na wykresie
        sensorData.addColumn({ type: 'boolean', role: 'emphasis' }); //To jest do zanzaczania na wykresie
        for (i = 0; i < model.LocationLng.length; i++) {
            sensorData.addRow([new Date(model.LocationTimestamp[i]), model.LocationLng[i], false]);
        }
        view = new google.visualization.DataView(sensorData);
        updateChart();
        dash.draw(view);
    }

    function GPSLat() {
        // Przykład:
        sensorData = new google.visualization.DataTable();
        sensorData.addColumn('date', 'Date');
        sensorData.addColumn('number', 'Lat');
        sensorData.addColumn({ type: 'boolean', role: 'emphasis' });
        for (i = 0; i < model.LocationLng.length; i++) {
            sensorData.addRow([new Date(model.LocationTimestamp[i]), model.LocationLat[i], false]);
        }
        view = new google.visualization.DataView(sensorData);
        updateChart();
        dash.draw(view);
    }

    function Accelerometer(axis) {
        sensorData = new google.visualization.DataTable();
        sensorData.addColumn('date', 'Date');
        sensorData.addColumn('number', 'Acc');
        sensorData.addColumn({ type: 'boolean', role: 'emphasis' });
        for (i = 0; i < model.AccTimestamp.length; i++) {
            if (axis === 'X')
                sensorData.addRow([new Date(model.AccTimestamp[i]), model.AccX[i], false]);
            else if (axis === 'Y')
                sensorData.addRow([new Date(model.AccTimestamp[i]), model.AccY[i], false]);
            else
                sensorData.addRow([new Date(model.AccTimestamp[i]), model.AccZ[i], false]);
        }
        view = new google.visualization.DataView(sensorData);
        updateChart();
        dash.draw(view);
    }

    function LightSensor() {
        sensorData = new google.visualization.DataTable();
        sensorData.addColumn('date', 'Date');
        sensorData.addColumn('number', 'Light');
        sensorData.addColumn({ type: 'boolean', role: 'emphasis' });
        for (i = 0; i < model.LightTimestamp.length; i++) {
            sensorData.addRow([new Date(model.LightTimestamp[i]), model.LightIntensity[i], false]);
        }
        view = new google.visualization.DataView(sensorData);
        updateChart();
        dash.draw(view);
    }

    function Gyroscope(axis) {
        sensorData = new google.visualization.DataTable();
        sensorData.addColumn('date', 'Date');
        sensorData.addColumn('number', 'Gyro');
        sensorData.addColumn({ type: 'boolean', role: 'emphasis' });
        for (i = 0; i < model.AccTimestamp.length; i++) {
            if (axis === 'X')
                sensorData.addRow([new Date(model.GyroTimestamp[i]), model.GyroX[i], false]);
            else if (axis === 'Y')
                sensorData.addRow([new Date(model.GyroTimestamp[i]), model.GyroY[i], false]);
            else
                sensorData.addRow([new Date(model.GyroTimestamp[i]), model.GyroZ[i], false]);
        }
        view = new google.visualization.DataView(sensorData);
        updateChart();
        dash.draw(view);
    }

    function Split() {
        alert("TODO: podpiac do bazy" +
            "Wyciac dane o timestampie z zakresu od :" +
            startRange.getTime() + " do " + endRange.getTime());
        $.ajax({
            type: "POST",
            url: "Split",
            data: "&start=" + startRange.getTime() + "&end=" + endRange.getTime(),
            complete: function (data) {
                //Zdekodowac Jsona do modelu
                location.reload(true);
            }
        });

    }

    function Delete() {

        alert("TODO: podpiac do bazy" +
            "Usunac dane o timestampie z zakresu od :" +
            startRange.getTime() + " do " + endRange.getTime());
        $.ajax({
            type: "POST",
            url: "Delete",
            data: "&start=" + startRange.getTime() + "&end=" + endRange.getTime(),
            complete: function (data) {
                //Zdekodowac Jsona do modelu
                location.reload(true);
            }
        });
        // Trzeba usunac z bazy rekordy o dacie pomiedzy:  startRange; endRange;
    }

    function GetSensorData(start, end) {

        $.ajax({
            type: "POST",
            url: "SelectedData",
            data: "&start=" + start + "&end=" + end,
            complete: function (data) {
                //Zdekodowac Jsona do modelu
                alert(JSON.stringify(data));
            }
        });
    }

    google.maps.event.addDomListener(window, 'load', initMap);
</script>

@section scripts {

    <!--  Google Maps Plugin    -->
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
    @*<script src="~/assets/js/myJS.js"></script>*@
    <!--<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVdWukfQJEFY_VO20ny3G8egrK2gS2QvI"></script> -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAN2leofGiYu947JXBwlik7Gj0b5hgQ758&callback=initMap">
    </script>
}