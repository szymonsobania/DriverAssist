@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Statistics";
}

@model IEnumerable<DriverAssist.Models.Coordinate>
<script src="https://code.jquery.com/jquery-3.1.0.min.js"> </script>

<div id="map" style="height: 300px; height:50%; text-align: center; width: 100%;"></div>
<div>
    <button type="submit" class="btn btn-info btn-fill pull-left" onclick="Split()">Split</button>
    <button type="submit" class="btn btn-info btn-fill pull-left" onclick="Test()">Delete</button>
</div>

<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">Sensor Tables</a>
            </div>
            <div class="collapse navbar-collapse" id="myNavbar">
                <ul class="nav navbar-nav">
                    <li><a href="#section1">Accelerometer</a></li>
                    <li><a href="#section2">GPS</a></li>
                    <li><a href="#section3">Magnetometer</a></li>
                    <li><a href="#section4">Gyroscope</a></li>
                    <li><a href="#section5">Whatever</a></li>
                </ul>
            </div>
        </div>
        <div id="section1" class="container-fluid">
            <h1>Chart</h1>
            <div id="chart_div"></div>
        </div>
        <div id="section2" class="container-fluid">
            <h1>Accelometer</h1>
            <div id="dashboard">
                <div id="chart_div2"></div>
                <div id="range_filter_div"></div>
            </div>
        </div>
        <div id="section3" class="container-fluid">
            <h1>Section 3</h1>
            <p>One more chart</p>
        </div>
        <div id="section4" class="container-fluid">
            <h1>Section 4</h1>
            <p>One more chart</p>

        </div>
        <div id="section5" class="container-fluid">
            <h1>Section 5</h1>
            <p>One more chart</p>
        </div>
    </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    var poly;
    var selectionPoly;
    var map;
    var markers = [];
    var chart;
    var startRange;
    var endRange;
    var secondClick = false;
    var coordinates;
    var sensorData;
    var rangeFilter;
    var dash;
    var view;

    google.charts.load('current', { packages: ['corechart', 'line', 'controls'] });

    google.charts.setOnLoadCallback(drawBackgroundColor);

    var model = @Html.Raw(Json.Encode(Model));

    function drawBackgroundColor() {
        coordinates = new google.visualization.DataTable();
        coordinates.addColumn('number', 'Lat');
        coordinates.addColumn('number', 'Lng');

        $.each(model,
            function(i, item) {
                coordinates.addRow([item.Lat, item.Lng]);
            });

        sensorData = new google.visualization.DataTable();
        sensorData.addColumn('date', 'Date');
        sensorData.addColumn('number', 'Lng');
        sensorData.addColumn({ type: 'boolean', role: 'emphasis' });

        $.each(model,
            function(i, item) {
                sensorData.addRow([new Date(2012, 1, 1, 1, i), item.Lng, false]);
            });

        rangeFilter = new google.visualization.ControlWrapper({
            controlType: 'ChartRangeFilter',
            containerId: 'range_filter_div',
            options: {
                format: 'h:mm a',
                filterColumnIndex: 0,
                ui: {
                    chartOptions: {
                        height: 50,
                        chartArea: {
                            width: '75%'
                        }
                    },
                    minRangeSize: 864000, // 86400000ms = 1 day
                    snapToData: true
                }
            },
            view: {
                columns: [0, 1, 2]
            }
        });

        chart = new google.visualization.ChartWrapper({
            chartType: 'LineChart',
            containerId: 'chart_div2',
            options: {
                // width and chartArea.width should be the same for the filter and chart
                height: 400,
                chartArea: {
                    width: '75%'
                },
                view: {
                    columns: [0, 1]
                },
                hAxis: {
                    gridlines: {
                        count: -1,
                        units: {
                            days: { format: ['MMM dd'] },
                            hours: { format: ['HH:mm', 'ha'] },
                        }
                    },
                    minorGridlines: {
                        units: {
                            hours: { format: ['hh:mm:ss a', 'ha'] },
                            minutes: { format: ['HH:mm a Z', ':mm'] }
                        }
                    }
                }
            }
        });

        dash = new google.visualization.Dashboard(document.getElementById('dashboard'));
        // bind the chart to the filter
        dash.bind([rangeFilter], [chart]);

        document.getElementById('range_filter_div').addEventListener("mouseup", updateChart);

        view = new google.visualization.DataView(sensorData);
        dash.draw(view);
    }

    function updateChart() {
        var rangeLength = 0;
        for (var i = 0; i < sensorData.getNumberOfRows(); i++) {
            if ((sensorData.getValue(i, 0) >= rangeFilter.getState().range.start) && (sensorData.getValue(i, 0) <= rangeFilter.getState().range.end)) {
                rangeLength++;
            }
        }
        var modulo = Math.ceil(rangeLength / 500);
        var visibleRows = [];
        for (var i = 0; i < sensorData.getNumberOfRows(); i++) {
            if (i % modulo == 0)
                visibleRows.push(i);
        }
        view.setRows(visibleRows);
        dash.draw(view);
    };

    function changeRange() {
        rangeFilter.setState({
            range: {
                start: startRange,
                end: endRange
            }
        });
        rangeFilter.draw();
        updateChart();
    }

    function initMap() {

        var model = @Html.Raw(Json.Encode(Model));
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            center: new google.maps.LatLng(model[1].Lat, model[1].Lng)
        });

        poly = new google.maps.Polyline({
            strokeColor: '#ff0000',
            strokeOpacity: 1.0,
            strokeWeight: 3
        });
        poly.setMap(map);

        selectionPoly = new google.maps.Polyline({
            strokeColor: '#00ff00',
            strokeOpacity: 1.0,
            strokeWeight: 5,
            map: map,
            path: []
        });


        $.each(model,
            function(i, item) {
                latLng = new google.maps.LatLng(item.Lat, item.Lng);
                poly.getPath().push(latLng);
            });


        google.maps.event.addListener(poly, 'click', function (h) {
            var latlng = h.latLng;
            var needle = {
                minDistance: 9999999999, //silly high
                index: -1,
                latlng: null
            };
            poly.getPath().forEach(function (routePoint, index) {
                var dist = google.maps.geometry.spherical.computeDistanceBetween(latlng, routePoint);
                if (dist < needle.minDistance) {
                    needle.minDistance = dist;
                    needle.index = index;
                    needle.latlng = routePoint;
                }
            });
            // The closest point in the polyline
            // alert("Closest index: " + needle.index);
            var marker = new google.maps.Marker({
                position: needle.latlng,
                title: needle.index.toString(), // title is id
                map: null
            });
            marker.setIcon(
                'https://lh3.ggpht.com/hx6IeSRualApBd7KZB9s2N7bcHZIjtgr9VEuOxHzpd05_CZ6RxZwehpXCRN-1ps3HuL0g8Wi=w9-h9');


            if (secondClick == false) {
                startRange = sensorData.getValue(parseInt(marker.title), 0);
                secondClick = true;
                DeleteMarkers(markers);
                markers = [];

                selectionPoly.setMap(null);
                selectionPoly = new google.maps.Polyline({
                    strokeColor: '#00ff00',
                    strokeOpacity: 1.0,
                    strokeWeight: 5,
                    map: map,
                    path: []
                });

            } else {
                endRange = sensorData.getValue(parseInt(marker.title), 0);
                secondClick = false;
                DrawSelectionPoly();
                SelectOnChart();
            }
            markers.push(marker);
            SetMapOnAll(map, markers);
        });
    }

    function DeleteMarkers(markers) {
        SetMapOnAll(null, markers);
    }

    function SetMapOnAll(map, markers) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    function SelectOnChart() {
        if (startRange > endRange ) {
            var temp = startRange;
            startRange = endRange;
            endRange = temp;
        }
        for (var i = 0; i < sensorData.getNumberOfRows(); i++) {
            if ((sensorData.getValue(i, 0) >= startRange) && (sensorData.getValue(i, 0) <= endRange)) {
                sensorData.setValue(i, 2, true);
            } else {
                sensorData.setValue(i, 2, false);
            }
        }
        changeRange();
    }

    function DrawSelectionPoly() {
        if (startRange > endRange ) {
            var temp = startRange;
            startRange = endRange;
            endRange = temp;
        }
        for (var i = 0; i < sensorData.getNumberOfRows(); i++) {
            if ((sensorData.getValue(i, 0) >= startRange) && (sensorData.getValue(i, 0) <= endRange)) {
                var latLng = new google.maps.LatLng(coordinates.getValue(i, 0), coordinates.getValue(i, 1));
                selectionPoly.getPath().push(latLng);
            }
        }
        selectionPoly.setMap(map);
    }

    function Split() {
        alert("TODO: podpiac do bazy");
    }

    google.maps.event.addDomListener(window, 'load', initMap);
</script>

@section scripts {

    <!--  Google Maps Plugin    -->
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
    @*<script src="~/assets/js/myJS.js"></script>*@
    <!--<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVdWukfQJEFY_VO20ny3G8egrK2gS2QvI"></script> -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAN2leofGiYu947JXBwlik7Gj0b5hgQ758&callback=initMap">
    </script>
}